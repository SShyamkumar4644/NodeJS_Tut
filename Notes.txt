1. First step is about create index.js file

2. Then type console.log("hello world")

3. And to execute the file, in terminal type node index.js

4. Check Node version node --version and npm --version, npm is for package installations
purposes similar like pip install in python

5. We created index.js file, we want to create a simple project and want to
initialise as node project for that in terminal type npm init

6. You will get to enter values, type enter till end or add name if you want

7. After that you will get package.json file

8. You can install express package, npm install express, and it will go to dependencies\
section in package.json file

9. After express is installed you will get node_modules folders which is large files
you can delete also for example, and if you want to reinstall you can npm install
and node_modules will be reinstalled. node_modules folders are downloaded from internet
which can be used in your project.

10. You can install nodemon, which will help to run the server when edited the file
on the go. Add script tag "start": "nodemon index.js"

{
  "name": "harry",
  "version": "1.0.0",
  "description": "Amazing package",
  "main": "index.js",
  "scripts": {
    "start": "nodemon index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Harry",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.1",
    "nodemon": "^2.0.20"
  }
}

And to execute the file type npm run start and you will get output

11. You can delete packages npm uninstall package_name

12. Install npm install @angular/cli

13. Package.Json file will have packages list installed for the project

14. package.json vs package-lock.json

15. Now you have only index.js file, you want to create another second.js file and
access from index.js file by imprt export methods

//index.js
const harry = require("./second");

console.log("Hello world", harry)

//second.js
harry = {
    name:"harry",
    favNum: 36,
    developer: true
}

module.exports = harry;

// you will get output when you executeby npm run start
[nodemon] clean exit - waiting for changes before restart
[nodemon] restarting due to changes...
[nodemon] starting `node index.js`
[nodemon] restarting due to changes...
Hello world { name: 'harry', favNum: 36, developer: true }
[nodemon] starting `node index.js`
Hello world { name: 'harry', favNum: 36, developer: true }
[nodemon] clean exit - waiting for changes before restart


16. Module wrapper functions
//second.js
//Wrap like this
(function(exports, require, module, __filename, __dirname){
    harry = {
        name:"harry",
        favNum: 36,
        developer: true
    }
    module.exports = harry;

})

//To check what is these terms 
// (function(exports, require, module, __filename, __dirname){

    harry = {
        name:"harry",
        favNum: 36,
        developer: true
    }

    console.log(exports, require, module, __filename, __dirname)
    
    module.exports = harry;

// })
npm run start you will get below output
PS E:\NodeJS_Tutorials_CWH> npm run start
npm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead.

> harry@1.0.0 start
> nodemon index.js

[nodemon] 2.0.20
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,json
[nodemon] starting `node index.js`
{} [Function: require] {
  resolve: [Function: resolve] { paths: [Function: paths] },
  main: Module {
    id: '.',
    path: 'E:\\NodeJS_Tutorials_CWH',
    exports: {},
    filename: 'E:\\NodeJS_Tutorials_CWH\\index.js',
    loaded: false,
    children: [ [Module] ],
    paths: [ 'E:\\NodeJS_Tutorials_CWH\\node_modules', 'E:\\node_modules' ]   
  },
  extensions: [Object: null prototype] {
    '.js': [Function (anonymous)],
    '.json': [Function (anonymous)],
    '.node': [Function (anonymous)]
  },
  cache: [Object: null prototype] {
    'E:\\NodeJS_Tutorials_CWH\\index.js': Module {
      id: '.',
      path: 'E:\\NodeJS_Tutorials_CWH',
      exports: {},
      filename: 'E:\\NodeJS_Tutorials_CWH\\index.js',
      loaded: false,
      children: [Array],
      paths: [Array]
    },
    'E:\\NodeJS_Tutorials_CWH\\second.js': Module {
      id: 'E:\\NodeJS_Tutorials_CWH\\second.js',
      path: 'E:\\NodeJS_Tutorials_CWH',
      exports: {},
      filename: 'E:\\NodeJS_Tutorials_CWH\\second.js',
      loaded: false,
      children: [],
      paths: [Array]
    }
  }
} Module {
  id: 'E:\\NodeJS_Tutorials_CWH\\second.js',
  path: 'E:\\NodeJS_Tutorials_CWH',
  exports: {},
  filename: 'E:\\NodeJS_Tutorials_CWH\\second.js',
  loaded: false,
  children: [],
  paths: [ 'E:\\NodeJS_Tutorials_CWH\\node_modules', 'E:\\node_modules' ]     
} E:\NodeJS_Tutorials_CWH\second.js E:\NodeJS_Tutorials_CWH
Hello world { name: 'harry', favNum: 36, developer: true }
[nodemon] clean exit - waiting for changes before restart

17. Go to Nodejs docs in google we will see, what is osmodules

18. Create a file osmodules.js and type const os = require('os');
os is built in module so you can type the above line of code

19. Now you can use any os methods lets say console.log(os.freemem())
an check the output you will get 
PS E:\NodeJS_Tutorials_CWH> node osmodules.js
1433235456

20. Another method console.log(os.homedir())
Output for that will show your current directory
PS E:\NodeJS_Tutorials_CWH> node osmodules.js
1305972736
C:\Users\hp

//osmodules.js
const os = require('os');

console.log(os.freemem())

console.log(os.homedir())

console.log(os.hostname())

console.log(os.platform())

console.log(os.release()) // version

console.log(os.type()) type of windows

//Output
PS E:\NodeJS_Tutorials_CWH> node osmodules.js
894353408
C:\Users\hp
LAPTOP-I5AJ3H5N
win32
10.0.19044
Windows_NT

21. Next is path module, create pathmodule.js file
//In pathmodule.js file
const path = require('path');

const a = path.basename("C:\\temp\\myfile.html");
console.log(a);

//execute 
PS E:\NodeJS_Tutorials_CWH> node pathmodule.js
myfile.html

//In pathmodule.js
const path = require('path');

const a1 = path.basename("C:\\temp\\myfile.html");
const a2 = path.dirname("C:\\temp\\myfile.html");
console.log(a1, a2);

//Output
PS E:\NodeJS_Tutorials_CWH> node pathmodule.js
myfile.html C:\temp

//In pathmodule.js
const path = require('path');

const a1 = path.basename("C:\\temp\\myfile.html"); filename
const a2 = path.dirname("C:\\temp\\myfile.html"); //current directory
const a3 = path.extname(__filename); //extension of the file name
console.log(a1, a2, a3);

//Output
PS E:\NodeJS_Tutorials_CWH> node pathmodule.js
myfile.html C:\temp .js

22. Next is File modules
Refer the docs: https://nodejs.org/api/fs.html

Create file.txt file and 
//In fsmodules.txt
const fs = require('fs');

fs.readFile('file.txt', 'utf8', (err, data) =>{
    console.log(err, data)
})

//Output
PS E:\NodeJS_Tutorials_CWH> node fsmodule.js
null This is a file

//NOTICE HERE
const fs = require('fs');

fs.readFile('file.txt', 'utf8', (err, data) =>{
    console.log(err, data)
})
 
console.log("Finished reading file")

//BUT YOU get Finished reading file PRINTED First, WHY?
//CAUSE READING THE FILE MIGHT TAKE TIME, SO Finished reading file IS PRINTED
//TILL THEN YOU PRINT YOURSELF, DON'T DELAY YOURSELF
PS E:\NodeJS_Tutorials_CWH> node fsmodule.js
Finished reading file
null This is a file

//IF YOU WANT FILE CONTENT TO BE PRINTED FIRST THEN PUT LIKE This
//fsmodule.js
const fs = require('fs');

// fs.readFile('file.txt', 'utf8', (err, data) =>{
//     console.log(err, data)
// })

const a = fs.readFileSync('file.txt')
console.log(a.toString())

console.log("Finished reading file")

//Output
PS E:\NodeJS_Tutorials_CWH> node fsmodule.js
This is a file
Finished reading file

//TILL HERE WAS READ FILE, NEXT WE WILL SEE WRITE FILE

//fsmodule.txt
const fs = require('fs');

// fs.readFile('file.txt', 'utf8', (err, data) =>{
//     console.log(err, data)
// })

// const a = fs.readFileSync('file.txt')
// console.log(a.toString())

fs.writeFile('file2.txt', 'This is a data', () =>{
    console.log('Written to the file')
});

console.log("Finished reading file")

//Output
PS E:\NodeJS_Tutorials_CWH> node fsmodule.js
Finished reading file
Written to the file

//STUDY CALLBACKS, PROMISES IN JAVASCRIPT TOPICS

NEXT
//writefileSync
const fs = require('fs');

// fs.readFile('file.txt', 'utf8', (err, data) =>{
//     console.log(err, data)
// })

// const a = fs.readFileSync('file.txt')
// console.log(a.toString())

// fs.writeFile('file2.txt', 'This is a data', () =>{
//     console.log('Written to the file')
// });

b = fs.writeFileSync('file2.txt', 'This is a data2')
console.log(b)

//Output
PS E:\NodeJS_Tutorials_CWH> node fsmodule.js
undefined
Finished reading file

console.log("Finished reading file")

//NEXT TOPIC COMMON JS MODULES
//CREATE 2 FILES modulefirst.js and modulesecond.js
//modulefirst.js
const simple = require("./modulesecond")

simple()

//modulesecond.js
function simple(){
    console.log("SIMPLE")
}

module.exports = simple;

//Output
PS E:\NodeJS_Tutorials_CWH> node modulefirst.js
SIMPLE

//MJS extension ES6 VERSIONS
NOW RENAME MODULESECOND.JS TO MODULESECOND.MJS

//now modulesecond.mjs file
export function simple(){
    console.log("SIMPLE IS COMPLEX")
}

// module.exports = simple;

//modulefirst.js
// const simple = require("./modulesecond")
import {simple} from "./modulesecond.mjs"

simple()

//Output
PS E:\NodeJS_Tutorials_CWH> node modulefirst.js
(node:13848) Warning: To load an ES module, set "type": "module" in the package.json or use the .mjs extension.
(Use `node --trace-warnings ...` to show where the warning was created)       
E:\NodeJS_Tutorials_CWH\modulefirst.js:2
import simple from "./modulesecond"
^^^^^^

SyntaxError: Cannot use import statement outside a module
    at Object.compileFunction (node:vm:352:18)
    at wrapSafe (node:internal/modules/cjs/loader:1033:15)
    at Module._compile (node:internal/modules/cjs/loader:1069:27)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)        
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:77:12)
    at node:internal/main/run_main_module:17:47
PS E:\NodeJS_Tutorials_CWH>
//YOU WILL GET ERROR LIKE THE ABOVE FOR THAT GO TO PACKAGE.JSON FILE, AND Add
"type": "module", below author section
//Package.json
{
  "name": "harry",
  "version": "1.0.0",
  "description": "Amazing package",
  "main": "index.js",
  "scripts": {
    "start": "nodemon index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Harry",
  "type": "module",
  "license": "ISC",
  "dependencies": {
    "@angular/cli": "^14.2.3",
    "express": "^4.18.1",
    "nodemon": "^2.0.20"
  }
}

//AFTER THIS YOUR OUTPUT WILL BE 
PS E:\NodeJS_Tutorials_CWH> node modulefirst.js
SIMPLE IS COMPLEX

//YOU CAN CREATE 2 FUNCTIONS AS CALL BY THE SAME name
//modulefirst.JS
// const simple = require("./modulesecond")
import {simple2 as simple} from "./modulesecond.mjs"

simple()

//modulesecond.mjs
export function simple(){
    console.log("SIMPLE IS COMPLEX")
}

export function simple2(){
    console.log("SIMPLE2 IS COMPLEX")
}

// module.exports = simple;

//OUTPUT
PS E:\NodeJS_Tutorials_CWH> node modulefirst.js
SIMPLE2 IS COMPLEX

//BUT 
//modulefirst.JS
// const simple = require("./modulesecond")
// import {simple2 as simple} from "./modulesecond.mjs"
import simple2 from "./modulesecond.mjs"

simple2()

//modulesecond.mjs
export function simple(){
    console.log("SIMPLE IS COMPLEX")
}

export function simple2(){
    console.log("SIMPLE2 IS COMPLEX")
}


// module.exports = simple;

//YOU WILL GET ERROR
PS E:\NodeJS_Tutorials_CWH> node modulefirst.js
file:///E:/NodeJS_Tutorials_CWH/modulefirst.js:3
import simple2 from "./modulesecond.mjs"
       ^^^^^^^
SyntaxError: The requested module './modulesecond.mjs' does not provide an export named 'default'
    at ModuleJob._instantiate (node:internal/modules/esm/module_job:128:21)    
    at async ModuleJob.run (node:internal/modules/esm/module_job:194:5)        
    at async Promise.all (index 0)
    at async ESMLoader.import (node:internal/modules/esm/loader:385:24)        
    at async loadESM (node:internal/process/esm_loader:88:5)
    at async handleMainPromise (node:internal/modules/run_main:61:12)
PS E:\NodeJS_Tutorials_CWH>

//FOR THAT IN MODULESECOND.MJS
export function simple(){
    console.log("SIMPLE IS COMPLEX")
}

// export function simple2(){
//     console.log("SIMPLE2 IS COMPLEX")
// }

export default function simple2(){
    console.log("SIMPLE2 IS COMPLEX")
}


// module.exports = simple;

//OUTPUT
PS E:\NodeJS_Tutorials_CWH> node modulefirst.js
SIMPLE2 IS COMPLEX

//NOW
//modulefirst.JS
// const simple = require("./modulesecond")
// import {simple2 as simple} from "./modulesecond.mjs"
// import simple2 from "./modulesecond.mjs"
// import {simple, simple2} from "./modulesecond.mjs"

// simple2()

import * as a2 from "./modulesecond.mjs"

// simple2()
console.log(a2)

//MODULESECOND.MJS
export function simple(){
    console.log("SIMPLE IS COMPLEX")
}

// export function simple2(){
//     console.log("SIMPLE2 IS COMPLEX")
// }

export default function simple2(){
    console.log("SIMPLE2 IS COMPLEX")
}


// module.exports = simple;

//OUTPUT OF a2
PS E:\NodeJS_Tutorials_CWH> node modulefirst.js
[Module: null prototype] {
  default: [Function: simple2],
  simple: [Function: simple]
}

//NOW IF YOU WANT TO RETURN THE values
//modulefirst.JS
// const simple = require("./modulesecond")
// import {simple2 as simple} from "./modulesecond.mjs"
// import simple2 from "./modulesecond.mjs"
// import {simple, simple2} from "./modulesecond.mjs"

// simple2()

import * as a2 from "./modulesecond.mjs"

// simple2()
console.log(a2.simple())

//MODULESECOND.MJS
export function simple(){
    console.log("SIMPLE IS COMPLEX")
    return 45;
}

// export function simple2(){
//     console.log("SIMPLE2 IS COMPLEX")
// }

export default function simple2(){
    console.log("SIMPLE2 IS COMPLEX")
}


// module.exports = simple;

//OUTPUT
//BEFORE RETURN Function
PS E:\NodeJS_Tutorials_CWH> node modulefirst.js
SIMPLE IS COMPLEX
undefined

//AFTER RETURN Function
PS E:\NodeJS_Tutorials_CWH> node modulefirst.js
SIMPLE IS COMPLEX
45

//URL MODULES
//urlmodule.js file
import url from 'url';
const myURL = new URL('https://example.org');
myURL.pathname = '/a/b/c';
myURL.search = '?d=e';
myURL.hash = '#fgh';

console.log(myURL)

//output
PS E:\NodeJS_Tutorials_CWH> node urlmodule.js  
URL {
  href: 'https://example.org/a/b/c?d=e#fgh',   
  origin: 'https://example.org',
  protocol: 'https:',
  username: '',
  password: '',
  host: 'example.org',
  hostname: 'example.org',
  port: '',
  pathname: '/a/b/c',
  search: '?d=e',
  searchParams: URLSearchParams { 'd' => 'e' },
  hash: '#fgh'
}

//EVENTS IN NodeJS
//create nodeevents.js file
const EventEmitter = require('events');

class MyEmitter extends EventEmitter {}

const myEmitter = new MyEmitter();
myEmitter.on('Waterfull', () => {
  console.log('Please turn off the motor!');
  setTimeout(() =>{
    console.log('Please turn off the motor! a gentle reminder');
  }, 3000);//3 second
});//this will run when event fires up
myEmitter.emit('event');

//when you execute you will get error
file:///E:/NodeJS_Tutorials_CWH/nodeevents.js:1
const EventEmitter = require('events');
                     ^

ReferenceError: require is not defined in ES module scope, you can use import instead
This file is being treated as an ES module because it has a '.js' file extension and 'E:\NodeJS_Tutorials_CWH\package.json' contains "type": "module". To treat it as a CommonJS script, rename 
it to use the '.cjs' file extension.
    at file:///E:/NodeJS_Tutorials_CWH/nodeevents.js:1:22
    at ModuleJob.run (node:internal/modules/esm/module_job:198:25)
    at async Promise.all (index 0)
    at async ESMLoader.import (node:internal/modules/esm/loader:385:24)
    at async loadESM (node:internal/process/esm_loader:88:5)
    at async handleMainPromise (node:internal/modules/run_main:61:12)

// for that error go to package.json and remove type:module;
Now when you execute, you get nothing cause you didnt create waterfull event
for that
//nodeevents.js
const EventEmitter = require('events');

class MyEmitter extends EventEmitter {}

const myEmitter = new MyEmitter();
myEmitter.on('Waterfull', () => {
  console.log('Please turn off the motor!');
  setTimeout(() =>{
    console.log('Please turn off the motor! a gentle reminder');
  }, 3000);//3 second
});//this will run when event fires up
myEmitter.emit('event');

console.log("this script is running")
console.log("this script is still running")
myEmitter.emit('Waterfull');

//add last 3 lines of code


//Output
PS E:\NodeJS_Tutorials_CWH> node nodeevents.js
this script is running
this script is still running
Please turn off the motor!
Please turn off the motor! a gentle reminder

//EVEN LAST 3 LINES OF CODE MODIFIED LIKE THIS
console.log("this script is running")
myEmitter.emit('Waterfull');
console.log("this script is still running")

//OUTPUT
PS E:\NodeJS_Tutorials_CWH> node nodeevents.js
this script is running
Please turn off the motor!
this script is still running
Please turn off the motor! a gentle reminder

//HERE setTimeout DOESNT BLOCK, LETS OTHER TO RUN IF THERE ARE PROCESSES

//THESE ARE USED IN REAL TIME CHAT APPILCATIONS, ETC, ZOOM CALLS WHEN SOMEONE, JOINS
THE MEETING POP UP THE MESSAGE

//NEXT TOPIC IS HTTP MODULES
//httpmodule.js
const http = require('http');

const port = process.env.PORT || 3000;

const server = http.createServer((req, res) => {
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/html')
    res.end('<h1> This is CodewithHarry </h1> <p> This is nice </p>')
})

server.listen(port, () =>{
    console.log(`Server is listening on port ${port}`)
});

//Output
PS E:\NodeJS_Tutorials_CWH> node httpmodule.js
Server is listening on port 3000
//Check in edge browser for output
Right click inspect element, click on network, refresh the page and you get 
localhost and 
below are the contents you will see on right side of localhost tab in network
Request URL: http://localhost:3000/
Request Method: GET
Status Code: 200 OK
Remote Address: [::1]:3000
Referrer Policy: strict-origin-when-cross-origin
Connection: keep-alive
Content-Length: 54
Content-Type: text/html
Date: Thu, 22 Sep 2022 07:44:23 GMT
Keep-Alive: timeout=5
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9
Cache-Control: max-age=0
Connection: keep-alive
DNT: 1
Host: localhost:3000
sec-ch-ua: "Microsoft Edge";v="105", " Not;A Brand";v="99", "Chromium";v="105"
sec-ch-ua-mobile: ?0
sec-ch-ua-platform: "Windows"
Sec-Fetch-Dest: document
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: none
Sec-Fetch-User: ?1
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36 Edg/105.0.1343.42

//httpmodule.js
const http = require('http');

const port = process.env.PORT || 3000;
//Here either check with ports available or run with 3000 port

const server = http.createServer((req, res) => {
    console.log(req.url) // put this code
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/html')
    res.end('<h1> This is CodewithHarry </h1> <p> This is nice </p>')
})

server.listen(port, () =>{
    console.log(`Server is listening on port ${port}`)
});

//Output
In browser type anything in url you will get
http://localhost:3000/This is nice

PS E:\NodeJS_Tutorials_CWH> node httpmodule.js
Server is listening on port 3000
/This%20is%20nice
/favicon.ico

1:18 mins done






